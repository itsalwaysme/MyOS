BASE=$(realpath .)
export PREFIX="$HOME/opt/cross"
export TARGET=x86_64-myos-elf
export PATH="$PREFIX/bin:$PATH"

mkdir -p $BASE/binutils
cd $BASE/binutils
if [ ! -d "binutils-2.31.1" ]; then
  wget -nc https://ftp.gnu.org/gnu/binutils/binutils-2.31.1.tar.xz
  tar -xf binutils-2.31.1.tar.xz
fi
mkdir -p build-binutils
cd build-binutils
../binutils-2.31.1/configure --target=$TARGET --prefix="$PREFIX" --with-sysroot --disable-nls --disable-werror
make
make install

read -p "Press enter to compiler GCC"

mkdir -p $BASE/gcc
cd $BASE/gcc
if [ ! -d "gcc-8.2.0" ]; then
  wget -nc https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.xz
  tar -xf gcc-8.2.0.tar.xz
fi
# Patch gcc to build separate libgcc's compiled with no-red-zone+mcmodel=kernel for when those options are added
# See https://wiki.osdev.org/Libgcc_without_red_zone and https://wiki.osdev.org/Building_libgcc_for_mcmodel%3Dkernel
# Also see https://gcc.gnu.org/onlinedocs/gcc-4.7.4/gccint/Target-Fragment.html for how MULTILIB_OPTIONS/DIRNAMES work (what the patch adds)
patch -p0 -N -r /dev/null < ../libgcc-no-red-zone-mcmodel-kernel.patch
which -- $TARGET-as || echo $TARGET-as is not in the PATH
mkdir -p build-gcc
cd build-gcc
../gcc-8.2.0/configure --target=$TARGET --prefix="$PREFIX" --disable-nls --enable-languages=c,c++ --without-headers
make all-gcc
make all-target-libgcc
# Libgcc where mcmodel=kernel AND no-redzone is added, along with just mcmodel=kernel have fpic support disabled as mcmodel=kernel doesnt support it (build fails. See https://wiki.osdev.org/Building_libgcc_for_mcmodel%3Dkernel
sed -i 's/^PICFLAG/DISABLED_PICFLAG/g' $TARGET/mcmodel-kernel/libgcc/Makefile
sed -i 's/^PICFLAG/DISABLED_PICFLAG/g' $TARGET/no-red-zone/mcmodel-kernel/libgcc/Makefile
make all-target-libgcc
make install-gcc
make install-target-libgcc
